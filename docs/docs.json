{"meta":{"generator":"0.9.0","format":20,"date":1629897301463},"custom":{"discord music player":{"name":"Discord Music Player","files":{"welcome":{"name":"Welcome","type":"md","content":"# Discord Music Player\r\n![npm](https://img.shields.io/npm/dt/discord-music-player?style=for-the-badge)\r\n![npm](https://img.shields.io/npm/v/discord-music-player?style=for-the-badge)\r\n![CodeFactor Grade](https://img.shields.io/codefactor/grade/github/SushiBtw/discord-music-player?color=%2348aaf1&style=for-the-badge)\r\n\r\n### Note: This is the __DEVELOPMENT__ version of Discord Music Player for Discord.JS v13!\r\n\r\nDiscord Music Player is a powerful [Node.js](https://nodejs.org) module that allows you to easily implement music commands.\r\n**Everything** is customizable, and everything can be done using this package - **there are no limitations!**\r\n\r\nThis package supports YouTube Videos and Playlists, Spotify Songs and Playlists.\r\nPackage is maintained by [SushiBtw](https://github.com/SushiBtw), but is an early fork of Androz2091.\r\n\r\n### Requirements:\r\n- [Discord.js v13](https://www.npmjs.com/package/discord.js),\r\n- [Node.JS v16](https://nodejs.org/),\r\n\r\n# Installation\r\n*Node.JS v16 or newer is required to run this module.*\r\n```sh\r\nnpm install --save discord-music-player@dev\r\n```\r\nInstall **@discordjs/opus**:\r\n```sh\r\nnpm install --save @discordjs/opus\r\n```\r\n**Install [FFMPEG](https://www.ffmpeg.org/download.html)!**\r\n\r\n# Getting Started\r\n**The code bellow, will show you how to use DMP in your code.**\r\n*Please define your **Player** after the **client/bot** definition.*\r\n```js\r\nconst Discord = require(\"discord.js\");\r\nconst client = new Discord.Client({\r\n    intents: [Intents.FLAGS.GUILDS, Intents.FLAGS.GUILD_MESSAGES, Intents.FLAGS.GUILD_VOICE_STATES]\r\n});\r\nconst settings = {\r\n    prefix: '!',\r\n    token: 'YourBotTokenHere'\r\n};\r\n\r\nconst { Player } = require(\"discord-music-player@8.0.0-dev2\");\r\nconst player = new Player(client, {\r\n    leaveOnEmpty: false, // This options are optional.\r\n});\r\n// You can define the Player as *client.player* to easly access it.\r\nclient.player = player;\r\n\r\nclient.on(\"ready\", () => {\r\n    console.log(\"I am ready to Play with DMP ðŸŽ¶\");\r\n});\r\n\r\nclient.login(settings.token);\r\n```\r\n\r\n# Example Usage\r\n*WARNING: This page is being designed, all working functions can be found bellow.*\r\n```js\r\nconst { RepeatMode } = require('discord-music-player');\r\n\r\nclient.on('messageCreate', async (message) => {\r\n    const args = message.content.slice(settings.prefix.length).trim().split(/ +/g);\r\n    const command = args.shift();\r\n    let guildQueue = client.player.getQueue(message.guild.id);\r\n\r\n    if(command === 'play') {\r\n        let queue = client.player.createQueue(message.guild.id);\r\n        await queue.join(message.member.voice.channel);\r\n        let song = await queue.play(args.join(' ')).catch(_ => {\r\n            if(!guildQueue)\r\n                queue.stop();\r\n        });\r\n    }\r\n\r\n    if(command === 'playlist') {\r\n        let queue = client.player.createQueue(message.guild.id);\r\n        await queue.join(message.member.voice.channel);\r\n        let song = await queue.playlist(args.join(' ')).catch(_ => {\r\n            if(!guildQueue)\r\n                queue.stop();\r\n        });\r\n    }\r\n\r\n    if(command === 'skip') {\r\n        guildQueue.skip();\r\n    }\r\n\r\n    if(command === 'stop') {\r\n        guildQueue.stop();\r\n    }\r\n\r\n    if(command === 'removeLoop') {\r\n        guildQueue.setRepeatMode(RepeatMode.DISABLED); // or 0 instead of RepeatMode.DISABLED\r\n    }\r\n\r\n    if(command === 'toggleLoop') {\r\n        guildQueue.setRepeatMode(RepeatMode.SONG); // or 1 instead of RepeatMode.DISABLED\r\n    }\r\n\r\n    if(command === 'toggleQueueLoop') {\r\n        guildQueue.setRepeatMode(RepeatMode.QUEUE); // or 2 instead of RepeatMode.DISABLED\r\n    }\r\n\r\n    if(command === 'setVolume') {\r\n        guildQueue.setVolume(parseInt(args[0]));\r\n    }\r\n\r\n    if(command === 'seek') {\r\n        guildQueue.seek(parseInt(args[0]) * 1000);\r\n    }\r\n\r\n    if(command === 'clearQueue') {\r\n        guildQueue.clearQueue();\r\n    }\r\n\r\n    if(command === 'shuffle') {\r\n        guildQueue.shuffle();\r\n    }\r\n\r\n    if(command === 'getQueue') {\r\n        console.log(guildQueue);\r\n    }\r\n\r\n    if(command === 'getVolume') {\r\n        console.log(guildQueue.volume)\r\n    }\r\n\r\n    if(command === 'nowPlaying') {\r\n        console.log(`Now playing: ${guildQueue.nowPlaying}`);\r\n    }\r\n\r\n    if(command === 'pause') {\r\n        guildQueue.setPaused(true);\r\n    }\r\n\r\n    if(command === 'resume') {\r\n        guildQueue.setPaused(false);\r\n    }\r\n\r\n    if(command === 'remove') {\r\n        guildQueue.remove(parseInt(args[0]));\r\n    }\r\n})\r\n```\r\n\r\n### Events:\r\n```js\r\n// Init the event listener only once (at the top of your code).\r\nclient.player\r\n    // Emitted when channel was empty.\r\n    .on('channelEmpty',  (queue) =>\r\n        console.log(`Everyone left the Voice Channel, queue ended.`))\r\n    // Emitted when a song was added to the queue.\r\n    .on('songAdd',  (queue, song) =>\r\n        console.log(`Song ${song} was added to the queue.`))\r\n    // Emitted when a playlist was added to the queue.\r\n    .on('playlistAdd',  (queue, playlist) =>\r\n        console.log(`Playlist ${playlist} with ${playlist.songs.length} was added to the queue.`))\r\n    // Emitted when there was no more music to play.\r\n    .on('queueEnd',  (queue) =>\r\n        console.log(`The queue has ended.`))\r\n    // Emitted when a song changed.\r\n    .on('songChanged', (queue, newSong, oldSong) =>\r\n        console.log(`${newSong} is now playing.`))\r\n    // Emitted when a first song in the queue started playing.\r\n    .on('songFirst',  (queue, song) =>\r\n        console.log(`Started playing ${song}.`))\r\n    // Emitted when someone disconnected the bot from the channel.\r\n    .on('clientDisconnect', (queue) =>\r\n        console.log(`I was kicked from the Voice Channel, queue ended.`))\r\n    // Emitted when deafenOnJoin is true and the bot was undeafened\r\n    .on('clientUndeafen', (queue) =>\r\n        console.log(`I got undefeanded.`))\r\n    // Emitted when there was an error with NonAsync functions.\r\n    .on('error', (error, queue) => {\r\n        console.log(`Error: ${error} in ${queue.guild.name}`);\r\n    });\r\n```\r\n\r\n# Passing custom data\r\nWhile running the `Queue#createQueue()` method you can pass a `options#data` object to hold custom data.\r\nThis can be made in two ways:\r\n```js\r\n// Pass custom data\r\nawait player.createQueue(message.guild.id, {\r\n    data: {\r\n        queueInitMessage: message,\r\n        myObject: 'this will stay with the queue :)',\r\n        more: 'add more... there are no limitations...'\r\n    }\r\n});\r\n// Or by using\r\nqueue.setData({\r\n    whatever: 'you want :D'\r\n});\r\n\r\n// Access custom data\r\nlet queue = player.getQueue(message.guild.id);\r\nlet initMessage = queue.data.queueInitMessage;\r\nawait initMessage.channel.send(`This message object is hold in Queue :D`);\r\n```\r\n","path":"README.md"}}}},"classes":[],"interfaces":[],"typedefs":[],"externals":[]}