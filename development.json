{"meta":{"generator":"0.9.0","format":20,"date":1629898953466},"custom":{"discord music player":{"name":"Discord Music Player","files":{"welcome":{"name":"Welcome","type":"md","content":"# Discord Music Player\n![npm](https://img.shields.io/npm/dt/discord-music-player?style=for-the-badge)\n![npm](https://img.shields.io/npm/v/discord-music-player?style=for-the-badge)\n![CodeFactor Grade](https://img.shields.io/codefactor/grade/github/SushiBtw/discord-music-player?color=%2348aaf1&style=for-the-badge)\n\n### Note: This is the __DEVELOPMENT__ version of Discord Music Player for Discord.JS v13!\n\nDiscord Music Player is a powerful [Node.js](https://nodejs.org) module that allows you to easily implement music commands.\n**Everything** is customizable, and everything can be done using this package - **there are no limitations!**\n\nThis package supports YouTube Videos and Playlists, Spotify Songs and Playlists.\nPackage is maintained by [SushiBtw](https://github.com/SushiBtw), but is an early fork of Androz2091.\n\n### Requirements:\n- [Discord.js v13](https://www.npmjs.com/package/discord.js),\n- [Node.JS v16](https://nodejs.org/),\n\n# Installation\n*Node.JS v16 or newer is required to run this module.*\n```sh\nnpm install --save discord-music-player@dev\n```\nInstall **@discordjs/opus**:\n```sh\nnpm install --save @discordjs/opus\n```\n**Install [FFMPEG](https://www.ffmpeg.org/download.html)!**\n\n# Getting Started\n**The code bellow, will show you how to use DMP in your code.**\n*Please define your **Player** after the **client/bot** definition.*\n```js\nconst Discord = require(\"discord.js\");\nconst client = new Discord.Client({\n    intents: [Intents.FLAGS.GUILDS, Intents.FLAGS.GUILD_MESSAGES, Intents.FLAGS.GUILD_VOICE_STATES]\n});\nconst settings = {\n    prefix: '!',\n    token: 'YourBotTokenHere'\n};\n\nconst { Player } = require(\"discord-music-player@8.0.0-dev2\");\nconst player = new Player(client, {\n    leaveOnEmpty: false, // This options are optional.\n});\n// You can define the Player as *client.player* to easly access it.\nclient.player = player;\n\nclient.on(\"ready\", () => {\n    console.log(\"I am ready to Play with DMP ðŸŽ¶\");\n});\n\nclient.login(settings.token);\n```\n\n# Example Usage\n*WARNING: This page is being designed, all working functions can be found bellow.*\n```js\nconst { RepeatMode } = require('discord-music-player');\n\nclient.on('messageCreate', async (message) => {\n    const args = message.content.slice(settings.prefix.length).trim().split(/ +/g);\n    const command = args.shift();\n    let guildQueue = client.player.getQueue(message.guild.id);\n\n    if(command === 'play') {\n        let queue = client.player.createQueue(message.guild.id);\n        await queue.join(message.member.voice.channel);\n        let song = await queue.play(args.join(' ')).catch(_ => {\n            if(!guildQueue)\n                queue.stop();\n        });\n    }\n\n    if(command === 'playlist') {\n        let queue = client.player.createQueue(message.guild.id);\n        await queue.join(message.member.voice.channel);\n        let song = await queue.playlist(args.join(' ')).catch(_ => {\n            if(!guildQueue)\n                queue.stop();\n        });\n    }\n\n    if(command === 'skip') {\n        guildQueue.skip();\n    }\n\n    if(command === 'stop') {\n        guildQueue.stop();\n    }\n\n    if(command === 'removeLoop') {\n        guildQueue.setRepeatMode(RepeatMode.DISABLED); // or 0 instead of RepeatMode.DISABLED\n    }\n\n    if(command === 'toggleLoop') {\n        guildQueue.setRepeatMode(RepeatMode.SONG); // or 1 instead of RepeatMode.DISABLED\n    }\n\n    if(command === 'toggleQueueLoop') {\n        guildQueue.setRepeatMode(RepeatMode.QUEUE); // or 2 instead of RepeatMode.DISABLED\n    }\n\n    if(command === 'setVolume') {\n        guildQueue.setVolume(parseInt(args[0]));\n    }\n\n    if(command === 'seek') {\n        guildQueue.seek(parseInt(args[0]) * 1000);\n    }\n\n    if(command === 'clearQueue') {\n        guildQueue.clearQueue();\n    }\n\n    if(command === 'shuffle') {\n        guildQueue.shuffle();\n    }\n\n    if(command === 'getQueue') {\n        console.log(guildQueue);\n    }\n\n    if(command === 'getVolume') {\n        console.log(guildQueue.volume)\n    }\n\n    if(command === 'nowPlaying') {\n        console.log(`Now playing: ${guildQueue.nowPlaying}`);\n    }\n\n    if(command === 'pause') {\n        guildQueue.setPaused(true);\n    }\n\n    if(command === 'resume') {\n        guildQueue.setPaused(false);\n    }\n\n    if(command === 'remove') {\n        guildQueue.remove(parseInt(args[0]));\n    }\n})\n```\n\n### Events:\n```js\n// Init the event listener only once (at the top of your code).\nclient.player\n    // Emitted when channel was empty.\n    .on('channelEmpty',  (queue) =>\n        console.log(`Everyone left the Voice Channel, queue ended.`))\n    // Emitted when a song was added to the queue.\n    .on('songAdd',  (queue, song) =>\n        console.log(`Song ${song} was added to the queue.`))\n    // Emitted when a playlist was added to the queue.\n    .on('playlistAdd',  (queue, playlist) =>\n        console.log(`Playlist ${playlist} with ${playlist.songs.length} was added to the queue.`))\n    // Emitted when there was no more music to play.\n    .on('queueEnd',  (queue) =>\n        console.log(`The queue has ended.`))\n    // Emitted when a song changed.\n    .on('songChanged', (queue, newSong, oldSong) =>\n        console.log(`${newSong} is now playing.`))\n    // Emitted when a first song in the queue started playing.\n    .on('songFirst',  (queue, song) =>\n        console.log(`Started playing ${song}.`))\n    // Emitted when someone disconnected the bot from the channel.\n    .on('clientDisconnect', (queue) =>\n        console.log(`I was kicked from the Voice Channel, queue ended.`))\n    // Emitted when deafenOnJoin is true and the bot was undeafened\n    .on('clientUndeafen', (queue) =>\n        console.log(`I got undefeanded.`))\n    // Emitted when there was an error with NonAsync functions.\n    .on('error', (error, queue) => {\n        console.log(`Error: ${error} in ${queue.guild.name}`);\n    });\n```\n\n# Passing custom data\nWhile running the `Queue#createQueue()` method you can pass a `options#data` object to hold custom data.\nThis can be made in two ways:\n```js\n// Pass custom data\nawait player.createQueue(message.guild.id, {\n    data: {\n        queueInitMessage: message,\n        myObject: 'this will stay with the queue :)',\n        more: 'add more... there are no limitations...'\n    }\n});\n// Or by using\nqueue.setData({\n    whatever: 'you want :D'\n});\n\n// Access custom data\nlet queue = player.getQueue(message.guild.id);\nlet initMessage = queue.data.queueInitMessage;\nawait initMessage.channel.send(`This message object is hold in Queue :D`);\n```\n","path":"README.md"}}}},"classes":[],"interfaces":[],"typedefs":[],"externals":[]}