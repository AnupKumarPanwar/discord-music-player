{"meta":{"generator":"0.9.0","format":20,"date":1629920242344},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"# Discord Music Player\n![npm](https://img.shields.io/npm/dt/discord-music-player?style=for-the-badge)\n![npm](https://img.shields.io/npm/v/discord-music-player?style=for-the-badge)\n![CodeFactor Grade](https://img.shields.io/codefactor/grade/github/SushiBtw/discord-music-player?color=%2348aaf1&style=for-the-badge)\n\n### Note: This is the __DEVELOPMENT__ version of Discord Music Player for Discord.JS v13!\n\nDiscord Music Player is a powerful [Node.js](https://nodejs.org) module that allows you to easily implement music commands.\n**Everything** is customizable, and everything can be done using this package - **there are no limitations!**\n\nThis package supports YouTube Videos and Playlists, Spotify Songs and Playlists.\nPackage is maintained by [SushiBtw](https://github.com/SushiBtw), but is an early fork of Androz2091.\n\n### Requirements:\n- [Discord.js v13](https://www.npmjs.com/package/discord.js),\n- [Node.JS v16](https://nodejs.org/),\n\n# Installation\n*Node.JS v16 or newer is required to run this module.*\n```sh\nnpm install --save discord-music-player@dev\n```\nInstall **@discordjs/opus**:\n```sh\nnpm install --save @discordjs/opus\n```\n**Install [FFMPEG](https://www.ffmpeg.org/download.html)!**\n\n# Getting Started\n**The code bellow, will show you how to use DMP in your code.**\n*Please define your **Player** after the **client/bot** definition.*\n```js\nconst Discord = require(\"discord.js\");\nconst client = new Discord.Client({\n    intents: [Intents.FLAGS.GUILDS, Intents.FLAGS.GUILD_MESSAGES, Intents.FLAGS.GUILD_VOICE_STATES]\n});\nconst settings = {\n    prefix: '!',\n    token: 'YourBotTokenHere'\n};\n\nconst { Player } = require(\"discord-music-player@8.0.0-dev2\");\nconst player = new Player(client, {\n    leaveOnEmpty: false, // This options are optional.\n});\n// You can define the Player as *client.player* to easly access it.\nclient.player = player;\n\nclient.on(\"ready\", () => {\n    console.log(\"I am ready to Play with DMP ðŸŽ¶\");\n});\n\nclient.login(settings.token);\n```\n\n# Example Usage\n*WARNING: This page is being designed, all working functions can be found bellow.*\n```js\nconst { RepeatMode } = require('discord-music-player');\n\nclient.on('messageCreate', async (message) => {\n    const args = message.content.slice(settings.prefix.length).trim().split(/ +/g);\n    const command = args.shift();\n    let guildQueue = client.player.getQueue(message.guild.id);\n\n    if(command === 'play') {\n        let queue = client.player.createQueue(message.guild.id);\n        await queue.join(message.member.voice.channel);\n        let song = await queue.play(args.join(' ')).catch(_ => {\n            if(!guildQueue)\n                queue.stop();\n        });\n    }\n\n    if(command === 'playlist') {\n        let queue = client.player.createQueue(message.guild.id);\n        await queue.join(message.member.voice.channel);\n        let song = await queue.playlist(args.join(' ')).catch(_ => {\n            if(!guildQueue)\n                queue.stop();\n        });\n    }\n\n    if(command === 'skip') {\n        guildQueue.skip();\n    }\n\n    if(command === 'stop') {\n        guildQueue.stop();\n    }\n\n    if(command === 'removeLoop') {\n        guildQueue.setRepeatMode(RepeatMode.DISABLED); // or 0 instead of RepeatMode.DISABLED\n    }\n\n    if(command === 'toggleLoop') {\n        guildQueue.setRepeatMode(RepeatMode.SONG); // or 1 instead of RepeatMode.DISABLED\n    }\n\n    if(command === 'toggleQueueLoop') {\n        guildQueue.setRepeatMode(RepeatMode.QUEUE); // or 2 instead of RepeatMode.DISABLED\n    }\n\n    if(command === 'setVolume') {\n        guildQueue.setVolume(parseInt(args[0]));\n    }\n\n    if(command === 'seek') {\n        guildQueue.seek(parseInt(args[0]) * 1000);\n    }\n\n    if(command === 'clearQueue') {\n        guildQueue.clearQueue();\n    }\n\n    if(command === 'shuffle') {\n        guildQueue.shuffle();\n    }\n\n    if(command === 'getQueue') {\n        console.log(guildQueue);\n    }\n\n    if(command === 'getVolume') {\n        console.log(guildQueue.volume)\n    }\n\n    if(command === 'nowPlaying') {\n        console.log(`Now playing: ${guildQueue.nowPlaying}`);\n    }\n\n    if(command === 'pause') {\n        guildQueue.setPaused(true);\n    }\n\n    if(command === 'resume') {\n        guildQueue.setPaused(false);\n    }\n\n    if(command === 'remove') {\n        guildQueue.remove(parseInt(args[0]));\n    }\n})\n```\n\n### Events:\n```js\n// Init the event listener only once (at the top of your code).\nclient.player\n    // Emitted when channel was empty.\n    .on('channelEmpty',  (queue) =>\n        console.log(`Everyone left the Voice Channel, queue ended.`))\n    // Emitted when a song was added to the queue.\n    .on('songAdd',  (queue, song) =>\n        console.log(`Song ${song} was added to the queue.`))\n    // Emitted when a playlist was added to the queue.\n    .on('playlistAdd',  (queue, playlist) =>\n        console.log(`Playlist ${playlist} with ${playlist.songs.length} was added to the queue.`))\n    // Emitted when there was no more music to play.\n    .on('queueEnd',  (queue) =>\n        console.log(`The queue has ended.`))\n    // Emitted when a song changed.\n    .on('songChanged', (queue, newSong, oldSong) =>\n        console.log(`${newSong} is now playing.`))\n    // Emitted when a first song in the queue started playing.\n    .on('songFirst',  (queue, song) =>\n        console.log(`Started playing ${song}.`))\n    // Emitted when someone disconnected the bot from the channel.\n    .on('clientDisconnect', (queue) =>\n        console.log(`I was kicked from the Voice Channel, queue ended.`))\n    // Emitted when deafenOnJoin is true and the bot was undeafened\n    .on('clientUndeafen', (queue) =>\n        console.log(`I got undefeanded.`))\n    // Emitted when there was an error with NonAsync functions.\n    .on('error', (error, queue) => {\n        console.log(`Error: ${error} in ${queue.guild.name}`);\n    });\n```\n\n# Passing custom data\nWhile running the `Queue#createQueue()` method you can pass a `options#data` object to hold custom data.\nThis can be made in two ways:\n```js\n// Pass custom data\nawait player.createQueue(message.guild.id, {\n    data: {\n        queueInitMessage: message,\n        myObject: 'this will stay with the queue :)',\n        more: 'add more... there are no limitations...'\n    }\n});\n// Or by using\nqueue.setData({\n    whatever: 'you want :D'\n});\n\n// Access custom data\nlet queue = player.getQueue(message.guild.id);\nlet initMessage = queue.data.queueInitMessage;\nawait initMessage.channel.send(`This message object is hold in Queue :D`);\n```\n","path":"README.md"}}}},"classes":[{"name":"Player","construct":{"name":"Player","params":[{"name":"client","type":[[["Client"]]]},{"name":"options","type":[[["PlayerOptions"]]]}]},"props":[{"name":"options","description":"<p>The player options</p>","type":[[["PlayerOptions"]]],"meta":{"line":25,"file":"Player.ts","path":"src"}}],"methods":[{"name":"createQueue","description":"<p>Creates the guild queue.</p>","params":[{"name":"guildId","type":[[["Snowflake"]]]},{"name":"options","type":[[["PlayerOptions"]]]}],"returns":[[["Queue"]]],"meta":{"line":41,"file":"Player.ts","path":"src"}},{"name":"hasQueue","description":"<p>Check if the guild has a queue.</p>","params":[{"name":"guildId","type":[[["Snowflake"]]]}],"returns":[[["boolean"]]],"meta":{"line":63,"file":"Player.ts","path":"src"}},{"name":"getQueue","description":"<p>Gets the guild queue.</p>","params":[{"name":"guildId","type":[[["Snowflake"]]]}],"returns":{"types":[[["Queue"]]],"nullable":true},"meta":{"line":72,"file":"Player.ts","path":"src"}},{"name":"setQueue","description":"<p>Deletes the guild queue.</p>","params":[{"name":"guildId","type":[[["Snowflake"]]]},{"name":"queue","type":[[["Queue"]]]}],"returns":[[["void"]]],"meta":{"line":81,"file":"Player.ts","path":"src"}},{"name":"deleteQueue","description":"<p>Deletes the guild queue.</p>","params":[{"name":"guildId","type":[[["Snowflake"]]]}],"returns":[[["void"]]],"meta":{"line":91,"file":"Player.ts","path":"src"}},{"name":"_voiceUpdate","description":"<p>Handle a Voice State Update</p>","access":"private","params":[{"name":"oldState","type":[[["VoiceState"]]]},{"name":"newState","type":[[["VoiceState"]]]}],"returns":[[["void"]]],"meta":{"line":100,"file":"Player.ts","path":"src"}}],"meta":{"line":11,"file":"Player.ts","path":"src"}},{"name":"Queue","construct":{"name":"Queue","params":[{"name":"player","type":[[["Player"]]]},{"name":"guild","type":[[["Guild"]]]},{"name":"options","type":[[["PlayerOptions"]]]}]},"props":[{"name":"player","description":"<p>The guild of the queue</p>","type":[[["Guild"]]],"meta":{"line":33,"file":"Queue.ts","path":"src/managers"}},{"name":"guild","description":"<p>The guild of the queue</p>","type":[[["Guild"]]],"meta":{"line":33,"file":"Queue.ts","path":"src/managers"}},{"name":"options","description":"<p>The queue options</p>","type":[[["PlayerOptions"]]],"meta":{"line":39,"file":"Queue.ts","path":"src/managers"}},{"name":"volume","description":"<p>Gets the current volume</p>","type":[[["number"]]],"meta":{"line":287,"file":"Queue.ts","path":"src/managers"}},{"name":"nowPlaying","description":"<p>Returns current playing song</p>","type":[[["Song"]]],"meta":{"line":308,"file":"Queue.ts","path":"src/managers"}}],"methods":[{"name":"join","description":"<p>Joins a voice channel</p>","params":[{"name":"_channel","type":[[["GuildChannelResolvable"]]]}],"async":true,"returns":[[["Promise","<"],["Queue",">"]]],"meta":{"line":52,"file":"Queue.ts","path":"src/managers"}},{"name":"play","description":"<p>Plays or Queues a song (in a VoiceChannel)</p>","params":[{"name":"search","type":[[["Song"]],[["string"]]]},{"name":"options","type":[[["PlayOptions"]]]}],"async":true,"returns":[[["Promise","<"],["Song",">"]]],"meta":{"line":121,"file":"Queue.ts","path":"src/managers"}},{"name":"playlist","description":"<p>Plays or Queues a playlist (in a VoiceChannel)</p>","params":[{"name":"search","type":[[["Playlist"]],[["string"]]]},{"name":"options","type":[[["PlaylistOptions"]]]}],"async":true,"returns":[[["Promise","<"],["Playlist",">"]]],"meta":{"line":176,"file":"Queue.ts","path":"src/managers"}},{"name":"seek","description":"<p>Seeks the current playing Song</p>","params":[{"name":"time","type":[[["number"]]]}],"async":true,"returns":[[["boolean"]]],"meta":{"line":199,"file":"Queue.ts","path":"src/managers"}},{"name":"skip","description":"<p>Skip the current Song</p>","meta":{"line":222,"file":"Queue.ts","path":"src/managers"}},{"name":"stop","description":"<p>Stops playing the Music and cleans the Queue</p>","meta":{"line":235,"file":"Queue.ts","path":"src/managers"}},{"name":"shuffle","description":"<p>Shuffles the Queue</p>","returns":[[["Array","<"],["Song",">"]]],"meta":{"line":246,"file":"Queue.ts","path":"src/managers"}},{"name":"setPaused","description":"<p>Pause/resume the current Song</p>","meta":{"line":261,"file":"Queue.ts","path":"src/managers"}},{"name":"remove","description":"<p>Remove a Song from the Queue</p>","params":[{"name":"index","type":[[["number"]]]}],"meta":{"line":272,"file":"Queue.ts","path":"src/managers"}},{"name":"setVolume","description":"<p>Sets the current volume</p>","params":[{"name":"volume","type":[[["number"]]]}],"returns":[[["boolean"]]],"meta":{"line":297,"file":"Queue.ts","path":"src/managers"}},{"name":"clearQueue","description":"<p>Clears the Queue</p>","returns":[[["void"]]],"meta":{"line":316,"file":"Queue.ts","path":"src/managers"}},{"name":"setRepeatMode","description":"<p>Sets Queue repeat mode</p>","params":[{"name":"repeatMode","type":[[["RepeatMode"]]]}],"returns":[[["boolean"]]],"meta":{"line":326,"file":"Queue.ts","path":"src/managers"}},{"name":"setData","description":"<p>Set's custom queue data</p>","params":[{"name":"data","type":[[["any"]]]}],"returns":[[["void"]]],"meta":{"line":342,"file":"Queue.ts","path":"src/managers"}},{"name":"destroy","description":"<p>Destroys the queue</p>","access":"private","params":[{"name":"leaveOnStop","type":[[["boolean"]]]}],"returns":[[["void"]]],"meta":{"line":351,"file":"Queue.ts","path":"src/managers"}}],"meta":{"line":20,"file":"Queue.ts","path":"src/managers"}},{"name":"Song","construct":{"name":"Song","params":[{"name":"raw","type":[[["RawSong"]]]},{"name":"queue","type":[[["Queue"]]]},{"name":"requestedBy","nullable":true,"type":[[["User"]]]}]},"props":[{"name":"millisecons","description":"<p>Converts duration (HH:MM:SS) to millisecons</p>","type":[[["number"]]],"meta":{"line":51,"file":"Song.ts","path":"src/managers"}}],"methods":[{"name":"_setFirst","access":"private","params":[{"name":"first","default":true,"nullable":true,"type":[[["boolean"]]]}],"meta":{"line":59,"file":"Song.ts","path":"src/managers"}},{"name":"setData","description":"<p>Set's custom song data</p>","params":[{"name":"data","type":[[["any"]]]}],"returns":[[["void"]]],"meta":{"line":67,"file":"Song.ts","path":"src/managers"}},{"name":"toString","description":"<p>Song name and author in string representation</p>","returns":[[["string"]]],"meta":{"line":76,"file":"Song.ts","path":"src/managers"}}],"meta":{"line":18,"file":"Song.ts","path":"src/managers"}},{"name":"Utils","methods":[{"name":"parseVideo","description":"<p>Get ID from YouTube link</p>","scope":"static","params":[{"name":"url","type":[[["string"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":28,"file":"Utils.ts","path":"src/utils"}},{"name":"parsePlaylist","description":"<p>Get ID from Playlist link</p>","scope":"static","params":[{"name":"url","type":[[["string"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":38,"file":"Utils.ts","path":"src/utils"}},{"name":"search","description":"<p>Search for Songs</p>","scope":"static","params":[{"name":"Search","type":[[["string"]]]},{"name":"SOptions","type":[[["PlayOptions"]]]},{"name":"Queue","type":[[["Queue"]]]},{"name":"Limit","default":1,"type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["Array","<"],["Song",">>"]]],"meta":{"line":48,"file":"Utils.ts","path":"src/utils"}},{"name":"link","description":"<p>Search for Song via link</p>","scope":"static","params":[{"name":"Search","type":[[["string"]]]},{"name":"SOptions","type":[[["PlayOptions"]]]},{"name":"Queue","type":[[["Queue"]]]}],"async":true,"returns":[[["Promise","<"],["Song",">"]]],"meta":{"line":127,"file":"Utils.ts","path":"src/utils"}},{"name":"best","description":"<p>Gets the best result of a Search</p>","scope":"static","params":[{"name":"Search","type":[[["Song"]],[["string"]]]},{"name":"SOptions","type":[[["PlayOptions"]]]},{"name":"Queue","type":[[["Queue"]]]},{"name":"Limit","default":1,"type":[[["Number"]]]}],"async":true,"returns":[[["Promise","<"],["Song",">"]]],"meta":{"line":173,"file":"Utils.ts","path":"src/utils"}},{"name":"playlist","description":"<p>Search for Playlist</p>","scope":"static","params":[{"name":"Search","type":[[["string"]]]},{"name":"SOptions","type":[[["PlaylistOptions"]]]},{"name":"Queue","type":[[["Queue"]]]},{"name":"Limit","type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["Playlist",">"]]],"meta":{"line":204,"file":"Utils.ts","path":"src/utils"}},{"name":"shuffle","description":"<p>Shuffles an array</p>","scope":"static","params":[{"name":"array","type":[[["Array","<"],["any",">"]]]}],"returns":[[["Array","<"],["any",">"]]],"meta":{"line":290,"file":"Utils.ts","path":"src/utils"}},{"name":"msToTime","description":"<p>Converts duration (HH:MM:SS) to millisecons</p>","scope":"static","returns":[[["string"]]],"meta":{"line":311,"file":"Utils.ts","path":"src/utils"}},{"name":"timeToMs","description":"<p>Converts millisecons to duration (HH:MM:SS)</p>","scope":"static","returns":[[["number"]]],"meta":{"line":326,"file":"Utils.ts","path":"src/utils"}}],"meta":{"line":14,"file":"Utils.ts","path":"src/utils"}},{"name":"StreamConnection","construct":{"name":"StreamConnection","params":[{"name":"connection","type":[[["VoiceConnection"]]]},{"name":"channel","type":[[["VoiceChannel"]],[["StageChannel"]]]}]},"props":[{"name":"player","description":"<p>The AudioPlayer</p>","type":[[["AudioPlayer"]]],"meta":{"line":48,"file":"StreamConnection.ts","path":"src/voice"}},{"name":"channel","description":"<p>The VoiceChannel or StageChannel</p>","type":[[["VoiceChannel"]],[["StageChannel"]]],"meta":{"line":54,"file":"StreamConnection.ts","path":"src/voice"}},{"name":"volume","description":"<p>Gets the current volume</p>","type":[[["number"]]],"meta":{"line":192,"file":"StreamConnection.ts","path":"src/voice"}}],"methods":[{"name":"createAudioStream","params":[{"name":"stream","type":[[["Readable"]],[["string"]]]},{"name":"options","type":[[["Object"]]]}],"returns":[[["AudioResource","<"],["Song",">"]]],"meta":{"line":113,"file":"StreamConnection.ts","path":"src/voice"}},{"name":"_enterState","access":"private","async":true,"returns":[[["void"]]],"meta":{"line":129,"file":"StreamConnection.ts","path":"src/voice"}},{"name":"playAudioStream","params":[{"name":"resource","type":[[["AudioResource","<"],["Song",">"]]]}],"async":true,"returns":[[["Promise","<"],["StreamConnection",">"]]],"meta":{"line":137,"file":"StreamConnection.ts","path":"src/voice"}},{"name":"setPauseState","description":"<p>Pauses/Resumes the connection</p>","params":[{"name":"state","type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":155,"file":"StreamConnection.ts","path":"src/voice"}},{"name":"stop","description":"<p>Stops and ends the connection</p>","returns":[[["boolean"]]],"meta":{"line":172,"file":"StreamConnection.ts","path":"src/voice"}},{"name":"leave","description":"<p>Disconnect and leave from the voice channel</p>","returns":[[["void"]]],"meta":{"line":180,"file":"StreamConnection.ts","path":"src/voice"}},{"name":"setVolume","description":"<p>Sets the current volume</p>","params":[{"name":"volume","type":[[["number"]]]}],"returns":[[["boolean"]]],"meta":{"line":202,"file":"StreamConnection.ts","path":"src/voice"}},{"name":"_invalidVolume","access":"private","params":[{"name":"volume","type":[[["number"]]]}],"returns":[[["boolean"]]],"meta":{"line":215,"file":"StreamConnection.ts","path":"src/voice"}}],"meta":{"line":34,"file":"StreamConnection.ts","path":"src/voice"}}],"interfaces":[],"typedefs":[],"externals":[]}